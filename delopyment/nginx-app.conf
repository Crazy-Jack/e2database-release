# nginx-app.conf

# place this file under /etc/nginx/sites-available/ and link it to /etc/nginx/sites-enable/
# the upstream component nginx needs to connect to
upstream django {
    server unix:/home/leelabupmcserver/e2database-release/e2db/app.sock; # for a file socket
    # server 127.0.0.1:8001; # for a web port socket (we'll use this first)
}

# configuration of the server
server {
    # the port your site will be served on, default_server indicates that this server block
    # is the block to use if no blocks match the server_name

    # the domain name it will serve for
    #server_name 35.188.168.177; # substitute your machine's IP address or FQDN
    server_name estrogene.org; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Django media
    location /media  {
	alias /home/leelabupmcserver/e2database-release/e2db/media;
    }

    location /static {
	alias /home/leelabupmcserver/e2database-release/e2db/static;
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  django;
        include     /home/leelabupmcserver/e2database-release/e2db/uwsgi_params; # the uwsgi_params file you installed
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/estrogene.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/estrogene.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = estrogene.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen      80;
    server_name estrogene.org;
    return 404; # managed by Certbot


}
